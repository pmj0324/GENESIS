#!/bin/bash
# Create a new task folder for GENESIS training
# Usage: ./create_task.sh TASK_NAME [--config CONFIG_NAME] [--data DATA_PATH]

set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Default values
DEFAULT_CONFIG="default"
DEFAULT_DATA="~/GENESIS/GENESIS-data/22644_0921_time_shift.h5"

# Parse arguments
TASK_NAME=$1
CONFIG_NAME=${2:-$DEFAULT_CONFIG}
DATA_PATH=${3:-$DEFAULT_DATA}

if [ -z "$TASK_NAME" ]; then
    echo "Usage: ./create_task.sh TASK_NAME [CONFIG_NAME] [DATA_PATH]"
    echo ""
    echo "Examples:"
    echo "  ./create_task.sh 0921_initial_training"
    echo "  ./create_task.sh 0921_test testing"
    echo "  ./create_task.sh 0922_custom default /path/to/data.h5"
    exit 1
fi

# Get script directory (tasks/)
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
TASK_DIR="${SCRIPT_DIR}/${TASK_NAME}"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Check if task already exists
if [ -d "$TASK_DIR" ]; then
    echo -e "${YELLOW}⚠️  Task folder already exists: ${TASK_DIR}${NC}"
    read -p "Overwrite? (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Aborted."
        exit 1
    fi
    rm -rf "$TASK_DIR"
fi

echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${BLUE}📁 Creating GENESIS Task: ${TASK_NAME}${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

# Create directory structure
echo -e "${GREEN}✓${NC} Creating directories..."
mkdir -p "${TASK_DIR}"/{logs,outputs/{checkpoints,samples,evaluation,plots}}

# Copy configuration
CONFIG_SOURCE="${PROJECT_ROOT}/configs/${CONFIG_NAME}.yaml"
if [ ! -f "$CONFIG_SOURCE" ]; then
    echo -e "${YELLOW}⚠️  Config not found: ${CONFIG_SOURCE}${NC}"
    echo -e "${YELLOW}   Using default.yaml${NC}"
    CONFIG_SOURCE="${PROJECT_ROOT}/configs/default.yaml"
fi

echo -e "${GREEN}✓${NC} Copying configuration: ${CONFIG_NAME}.yaml"
cp "$CONFIG_SOURCE" "${TASK_DIR}/config.yaml"

# Update paths in config
echo -e "${GREEN}✓${NC} Updating paths in config.yaml..."
sed -i.bak "s|output_dir:.*|output_dir: \"outputs\"|g" "${TASK_DIR}/config.yaml"
sed -i.bak "s|checkpoint_dir:.*|checkpoint_dir: \"outputs/checkpoints\"|g" "${TASK_DIR}/config.yaml"
sed -i.bak "s|log_dir:.*|log_dir: \"logs\"|g" "${TASK_DIR}/config.yaml"
sed -i.bak "s|h5_path:.*|h5_path: \"${DATA_PATH}\"|g" "${TASK_DIR}/config.yaml"
rm "${TASK_DIR}/config.yaml.bak"

# Create run script
echo -e "${GREEN}✓${NC} Creating run.sh..."
cat > "${TASK_DIR}/run.sh" << 'RUNSCRIPT'
#!/bin/bash
# Training script for GENESIS
# Auto-generated by create_task.sh

set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

# Get task directory
TASK_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
TASK_NAME="$(basename "$TASK_DIR")"
PROJECT_ROOT="$(dirname "$(dirname "$TASK_DIR")")"

echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${BLUE}🚀 GENESIS Training: ${TASK_NAME}${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""
echo -e "${GREEN}📁 Task Directory:${NC} ${TASK_DIR}"
echo -e "${GREEN}📁 Project Root:${NC} ${PROJECT_ROOT}"
echo -e "${GREEN}📄 Config:${NC} config.yaml"
echo ""

# Change to task directory (so relative paths work)
cd "$TASK_DIR"

# Activate environment if needed
# source ~/micromamba/envs/genesis/bin/activate  # Uncomment if needed

# Run training
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${BLUE}🎯 Starting Training...${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

# Clear Python cache
find "$PROJECT_ROOT" -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true

# Run with logging
python3 "${PROJECT_ROOT}/scripts/train.py" \
    --config config.yaml \
    2>&1 | tee logs/train.log

EXIT_CODE=${PIPESTATUS[0]}

if [ $EXIT_CODE -eq 0 ]; then
    echo ""
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}✅ Training Complete!${NC}"
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    echo -e "${GREEN}📊 Outputs:${NC}"
    echo -e "  Checkpoints:  ${TASK_DIR}/outputs/checkpoints/"
    echo -e "  Samples:      ${TASK_DIR}/outputs/samples/"
    echo -e "  Evaluation:   ${TASK_DIR}/outputs/evaluation/"
    echo -e "  Logs:         ${TASK_DIR}/logs/"
    echo ""
else
    echo ""
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${RED}❌ Training Failed (exit code: $EXIT_CODE)${NC}"
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    echo -e "${RED}Check logs:${NC} ${TASK_DIR}/logs/train.log"
    exit $EXIT_CODE
fi
RUNSCRIPT

chmod +x "${TASK_DIR}/run.sh"

# Create README
echo -e "${GREEN}✓${NC} Creating README.md..."
cat > "${TASK_DIR}/README.md" << TASKREADME
# Task: ${TASK_NAME}

## Task Information

- **Created**: $(date '+%Y-%m-%d %H:%M:%S')
- **Configuration**: ${CONFIG_NAME}.yaml
- **Data Path**: ${DATA_PATH}

## Directory Structure

\`\`\`
${TASK_NAME}/
├── config.yaml              # Task configuration
├── run.sh                   # Training script
├── README.md                # This file
├── logs/                    # Training logs
│   ├── train.log
│   └── tensorboard/
└── outputs/                 # All outputs
    ├── checkpoints/         # Model checkpoints
    ├── samples/             # Generated samples (NPZ + PNG)
    ├── evaluation/          # Evaluation results
    └── plots/               # Training plots
\`\`\`

## Quick Start

### 1. Review Configuration

\`\`\`bash
cat config.yaml
\`\`\`

### 2. Run Training

\`\`\`bash
bash run.sh
\`\`\`

### 3. Monitor Progress

\`\`\`bash
# Watch logs
tail -f logs/train.log

# TensorBoard
tensorboard --logdir logs/tensorboard
\`\`\`

## After Training

### View Results

- **Best model**: \`outputs/checkpoints/best_model.pth\`
- **Samples**: \`outputs/samples/\`
- **Evaluation**: \`outputs/evaluation/generated_vs_real.png\`

### Generate More Samples

\`\`\`bash
python ../../scripts/sample.py \\
    --config config.yaml \\
    --checkpoint outputs/checkpoints/best_model.pth \\
    --output outputs/samples \\
    --num-samples 20
\`\`\`

### Resume Training

Edit \`run.sh\` and add:
\`\`\`bash
--resume outputs/checkpoints/checkpoint_epoch_50.pth
\`\`\`

## Notes

Add your notes here:
- 
- 
- 
TASKREADME

# Summary
echo ""
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${GREEN}✅ Task Created Successfully!${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""
echo -e "${GREEN}📁 Task Directory:${NC} ${TASK_DIR}"
echo -e "${GREEN}📄 Configuration:${NC} ${CONFIG_NAME}.yaml"
echo -e "${GREEN}💾 Data Path:${NC} ${DATA_PATH}"
echo ""
echo -e "${BLUE}🚀 Next Steps:${NC}"
echo -e "  1. cd ${TASK_DIR}"
echo -e "  2. Review config.yaml (optional)"
echo -e "  3. bash run.sh"
echo ""

